using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;

[Route("api/[controller]")]
[ApiController]
public class ProductsController : ControllerBase
{
    private readonly List<Product> _products = new List<Product>();

    /// Retrieves all products.
    [HttpGet]
    public IActionResult Get()
    {
        try
        {
            // Retrieve all products
            return Ok(_products);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { ErrorMessage = ex.Message });
        }
    }

    /// Retrieves a specific product by its ID.
    /// <param name="id">The ID of the product to retrieve.</param>
    [HttpGet("{id}")]
    public IActionResult GetById(int id)
    {
        try
        {
            // Retrieve a specific product
            var product = _products.FirstOrDefault(p => p.Id == id);

            if (product == null)
                return NotFound(new { ErrorMessage = "Product not found." });

            return Ok(product);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { ErrorMessage = ex.Message });
        }
    }

    /// Adds a new product.
    /// <param name="product">The product to add.</param>
    [HttpPost]
    public IActionResult Post([FromBody] Product product)
    {
        try
        {
            // Add a new product
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            _products.Add(product);
            return CreatedAtAction(nameof(GetById), new { id = product.Id }, product);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { ErrorMessage = ex.Message });
        }
    }

    /// Updates a specific product by its ID.
    /// <param name="id">The ID of the product to update.</param>
    /// <param name="product">The updated product data.</param>
    [HttpPut("{id}")]
    public IActionResult Put(int id, [FromBody] Product product)
    {
        try
        {
            // Update a specific product
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var existingProduct = _products.FirstOrDefault(p => p.Id == id);
            if (existingProduct == null)
                return NotFound(new { ErrorMessage = "Product not found." });

            existingProduct.Name = product.Name;
            existingProduct.Price = product.Price;

            return NoContent();
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { ErrorMessage = ex.Message });
        }
    }

    /// Deletes a specific product by its ID.
    /// <param name="id">The ID of the product to delete.</param>
    [HttpDelete("{id}")]
    public IActionResult Delete(int id)
    {
        try
        {
            // Delete a specific product
            var product = _products.FirstOrDefault(p => p.Id == id);

            if (product == null)
                return NotFound(new { ErrorMessage = "Product not found." });

            _products.Remove(product);
            return NoContent();
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { ErrorMessage = ex.Message });
        }
    }

    /// Applies partial updates to a specific product by its ID using JSON Patch.
    /// <param name="id">The ID of the product to patch.</param>
    /// <param name="patchDocument">The JSON Patch document with partial updates.</param>
    [HttpPatch("{id}")]
    public IActionResult Patch(int id, [FromBody] JsonPatchDocument<Product> patchDocument)
    {
        try
        {
            // Apply partial updates to a specific product using JSON Patch
            var product = _products.FirstOrDefault(p => p.Id == id);

            if (product == null)
                return NotFound(new { ErrorMessage = "Product not found." });

            patchDocument.ApplyTo(product, ModelState);

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            return NoContent();
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { ErrorMessage = ex.Message });
        }
    }
}
